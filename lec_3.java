
// Step 3:- In 'application.properties' file.

// # Database connection
// spring.datasource.url=jdbc:postgresql://localhost:5432/myData
// spring.datasource.username=postgres
// spring.datasource.password=12345

// # JPA / Hibernate
// spring.jpa.hibernate.ddl-auto=update
// spring.jpa.show-sql=true
// spring.jpa.properties.hibernate.format_sql=true

// ---------------------------------------------------------------------------------------

// Stop and Start Database Server

// 1. Press Win + R → type services.msc → Enter.
// 2. Find PostgreSQL <version> in the list (e.g., PostgreSQL 17).
// 3. Right-click → Stop.

// ---------------------------------------------------------------------------------------

// Step 4:- In 'entity' package, Create a 'Student' class.

// @Entity
// public class Student {
//     @Id
//     @GeneratedValue(strategy = GenerationType.IDENTITY)
//     private Long id;
//     private String name;
//     private String email;
// }

// Note:-
// 1. Entity ki help se Postgresql Database ke table ke
//    saath connect kar paoge.

// 2. Database ke andar ek table ban jayegi 'Student' ke naam se.

// 3. id batane ke liye "@ID" ka use kar rahe hai.

// 4. jb bhi new 'Student' add hoga toh uski id generate
//    karne ke liye use karnege (id 1 se banegi):
// @GeneratedValue(strategy = GenerationType.IDENTITY)

// ---------------------------------------------------------------------------------------

// Step 5:- Now, run the Application.

// 1. Application run hone ke baad logs mey query dhikegi:

// Hibernate: 
//     create table student (
//         id bigint generated by default as identity,
//         email varchar(255),
//         name varchar(255),
//         primary key (id)
//     )

// 3. because hamne 'show-sql' and 'format_sql' true kar rakha hai 
//    'application.properties' file mey.

// 4. App jakar database mey table dhek sakte hai.

// 5. phle 'Schemas' mey ja kar 'public' mey ja kar 'Tables' pe click kro.

// 6. Now 'id, email, and name' column show hoga.

// ---------------------------------------------------------------------------------------

// Note:-
// 1. Mapping means connect karna. like:
// a. Object world (Java classes, objects, fields)
// b. Relational world (Database tables, rows, columns)

// 2. ek relation banana Java ke object ke fields aur database ke 
//    columns ke beech. Yehi ORM ka core concept hai.


// Note:-
// 1. Now, Object ko Relation se mapping kar diya hai.

// 2. Ye process hi ORM (Object Relational Mapping) kehlata hai.

// 2. Aur iske liye "Hibernate" ki use behind the sence hoti hai. and ye Spring
//    Data JPA use kar leta hai.

// 3. now, Entity ko controller se connect karne ke liye beech mey ek
//    interface cahiye.

// 4. Jo ki queries ko likhne mey help karega like(select, create, delete). jo
//    ki repository layer help karega.

// ---------------------------------------------------------------------------------------

// Step 6:- Now, Entity ko 'controller' se connect karne ke liye ek 'interface'
//          banayenge in 'repository' package.

// ---------------------------------------------------------------------------------------

// Step 7:- In 'repository' package, create 'StudentRepository' interface.

// @Repository
// public interface StudentRepository extends JpaRepository<Student, Long> {
// }

// Note:-
// 1. ye wahi layer hai jiske andar saare 'data-access' layer
//    ki queries likhi hogi.

// 2. Like Database ke saath manipulation karni hai.

// 3. JpaRepository<Student, Long>
// a. JpaRepository ke andar batani padti hai ki kis 'entity'
//    se connect karna hai and saath mey 'entity' ki id kis
//    type ki hai.

// 4. JpaRepository use karne se uske andar se bhi method
//    hai like create, delete, update mil jayenge.

// 5. now, isko 'controller' se connect karenge.

// ---------------------------------------------------------------------------------------

// Step 7:- Now, iss 'StudentRepository' ko Controller (StudentController)
//          se connect karenge.

// ---------------------------------------------------------------------------------------

// Note:-
// 1. ab maan lo 'student' create karna hai, toh create karne ke
//    liye ek alag mapping bananni padegi.

// 2. And get karne ke liye alag mapping.

// 3. Suppose mujhe saare ke saare student get karne hai.

// ---------------------------------------------------------------------------------------